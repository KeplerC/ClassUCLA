#! /usr/bin/python
# For luli use only...

import requests
from bs4 import BeautifulSoup

def getOpenSeats(index):
    URL = 'https://sa.ucla.edu/ro/public/soc/Results?t='+TERM+'&sBy=classidnumber&id='+index+'&undefined=Go&btnIsInIndex=btn_inIndex'
    try:
        r = requests.get(URL)
    except:
        print("Check your input")

    try:
        soup = BeautifulSoup(r.text, 'html.parser')
    except:
        print("parser failed")

    #string processing    
    text = soup.find_all('p') #find all tags
    info = get_detailed_class_info(index)

    #getting available seats 
    flag = -1
    printed = False #a flag for printing class names
    ostream = ""
    for i in range(len(text)):
        string = str(text[i])
        #print(string)
        if flag != -1:
            #print(string)
            #message parsers
            try:
                loc1 = string.find("</i>")+4
                loc2 = string.find("<br/>")
                loc3 = string.find("</p>")
            except:
                print("cannot parse the website")
            #output stream
            if loc2 == -1: #class is cancelled
                ostream+=" is cancelled \n"
            else:
                msg1 = string[loc1: loc2]
                msg2 = string[loc2+5: loc3]
                if(msg1.find("Closed by Dept") != -1):
                    msg1 = "Closed by Dept"
                    msg2 = msg2[1 : -1]
                ostream+=" is " + msg1
                msg2 = msg2.replace("<br/>", " with ");
                ostream+=". Its status is "+msg2+"\n"
                if(info["restriction"] != None):
                    ostream += "Its current restriction is "
                    ostream += info["restriction"].replace("<br/>", "")
                    ostream += "\n"
            flag = -1
        if string.find("Lec") != -1:
            #print(string)
            i+=1        #jump two lines
            flag = 0    #found it
        if string.find("Dis") != -1 and len(string) > 200:
            #print(string)
            i+=1        #jump two lines
            flag = 1    #found it
        if flag != -1 and printed == False:
            printed = True
            try:
                loc1 = string.find("subj_area_cd=") + 13 #class title
                loc2 = string.find("%20")
                loc3 = string.find("catlg_no=") + 10  #class number
                loc4 = string.find("%20", loc3) #find next after loc3
            except:
                print("cannot parse the website")
            
            ostream += string[loc1 : loc2]
            ostream += " "
            if string[loc3] == '0':
                loc3 += 1
            ostream += string[loc3 : loc4]
            ostream += '\n'
        if flag != -1:
            loc1 = string.find("</a>")
            loc2 = loc1 - 6         
            if(string[loc2] == '>'):
                loc2 += 1
            msg = string[loc2 : loc1]
            
            ostream += string [loc2 : loc1]
    return info, ostream 


# Get web page and build a soup
def get_web_page(URL):    
    try:
        r = requests.get(URL)
    except:
        print "failure loading searching page"
        
    try:
        soup = BeautifulSoup(r.text, 'html.parser')
        return soup
    except:
        print "Failure Creating Soup"

# get URL for detailed website
def get_class_info_basic(index):
    #initialize variables
    URL = 'https://sa.ucla.edu/ro/public/soc/Results?t='+TERM+'&sBy=classidnumber&id='+index+'&undefined=Go&btnIsInIndex=btn_inIndex'
    soup = get_web_page(URL)

    text = str(soup.find_all('p')) #find all tags
    loc1 = text.find("n<a href=\"") + 10
    loc2 = text.find("20\" target=") + 2
    string = "https://sa.ucla.edu" + text[loc1:loc2]
    string = string.replace("amp;", "")
    print string
    return string


from collections import OrderedDict
def get_detailed_class_info(index):
    soup = get_web_page(get_class_info_basic(index))
    text = str(soup.find_all('p')) #find all tags

    info = OrderedDict()
    loc1 = 0
    loc2 = 0
    #Search and Store subject name
    loc1 = text.find("    ")+5
    loc2 = text.find(" ", loc1)
    info["subject"] = text[loc1:loc2]

    #Search and Store course catalog number
    loc1 = loc2 + 4
    loc2 = text.find(" ", loc1)
    info["course_number"] = text[loc1:loc2] 

    #Search and Store course title
    loc1 = text.find(" - ", loc2) + 3
    loc2 = text.find("</p>", loc1)
    info["course_title"] = text[loc1: loc2]

    #Search and Store course website
    loc1 = text.find("<a href=", loc2) + 9
    loc2 = text.find(">", loc1)
    info["course_website"] = text[loc1: loc2]

    #Instructors
    loc1 = text.find("Instructor(s)", loc2) + 26
    loc2 = text.find("</", loc1)
    info["status"] = text[loc1: loc2]

    #Search and Store WL status
    loc1 = text.find("<p>", loc2) + 3
    loc2 = text.find("</", loc1)
    info["waitlist_status"] = text[loc1: loc2]

    #Search and Store days
    loc1 = text.find("data-content", loc2) + 14
    loc2 = text.find("\" ", loc1)
    day = text[loc1: loc2]
    info["day"] =convert_to_weekday(day)

    #Search and Store time
    loc1 = text.find(", <p>", loc2) + 5
    loc2 = text.find("</p>", loc1)
    info["time"] = text[loc1: loc2]

    #Search and Store location
    loc1 = text.find(", <p>", loc2) + 5
    loc2 = text.find("</p>", loc1)
    info["location"] = text[loc1: loc2]

    #Search and Store units
    loc1 = text.find(", <p>", loc2) + 5
    loc2 = text.find("</p>", loc1)
    info["units"] = text[loc1: loc2]

    #Search and Store instructor
    loc1 = text.find(", <p>", loc2) + 5
    loc2 = text.find("</p>", loc1)
    info["Instructor"] = text[loc1: loc2]

    #Search and Store final date 
    loc1 = text.find("(s)</p>, <p>", loc2) + 12
    loc2 = text.find("</p>", loc1)
    info["final_date"] = text[loc1: loc2]

    #Search and Store final week day
    loc1 = text.find(", <p>", loc2) + 5
    loc2 = text.find("</p>", loc1)
    info["final_weekday"] = convert_to_weekday(text[loc1: loc2])
    
    #Search and Store final time 
    loc1 = text.find(", <p>", loc2) + 5
    loc2 = text.find("</p>", loc1)
    info["final_time"] = text[loc1: loc2]

    #Search and Store final location
    loc1 = text.find(", <p>", loc2) + 5
    loc2 = text.find("</p>", loc1)
    if text[loc1] == "C":
        info["final_location"] = None
    else:
        info["final_location"] = text[loc1 : loc2]

    # search and store grade type pnp or letter
    loc1 = text.find("Level</p>, <p>", loc2) + 14
    loc2 = text.find("</p>", loc1)
    type = text[loc1: loc2]
    info["grade_type"] = ""
    if type.find("Pass") != -1:
        info["grade_type"] += "PNP "
    if type.find("Letter") != -1:
        info["grade_type"] += "Letter"

    # search and store restriction
    loc1 = text.find(", <p>", loc2) + 5
    loc2 = text.find("</p>", loc1)
    info["restriction"] = isNone(text[loc1: loc2])
    
    loc1 = text.find(", <p>", loc2) + 5
    loc2 = text.find("</p>", loc1)
    info["impacted"] = isNone(text[loc1: loc2])


    loc1 = text.find(", <p>", loc2) + 5
    loc2 = text.find("</p>", loc1)
    info["individual_studies"] = isNone(text[loc1: loc2])

    
    loc1 = text.find(", <p>", loc2) + 5
    loc2 = text.find("</p>", loc1)
    type = text[loc1: loc2]
    info["level"] = get_class_level(type)

    #TODO: Prerequisites
    loc1 = text.find("breakLongText\">", loc2) + 15
    loc2 = text.find("</p>", loc1)
    info["course_description"] = text[loc1: loc2]

    loc1 = text.find("breakLongText\">", loc2) + 15
    loc2 = text.find("</p>", loc1)
    info["class_description"] = text[loc1: loc2]

    
    loc1 = text.find("breakLongText\">", loc2) + 15
    loc2 = text.find("</p>", loc1)
    info["GE"] = isNone(text[loc1: loc2])

    
    loc1 = text.find("breakLongText\">", loc2) + 15
    loc2 = text.find("</p>", loc1)
    info["writing_II"] = isNone(text[loc1: loc2])

    loc1 = text.find("breakLongText\">", loc2) + 15
    loc2 = text.find("</p>", loc1)
    info["diveristy"] = isNone(text[loc1: loc2])
    return info


import pandas as pd
def create_data_frame(list):
    df = pd.DataFrame(list)
    return df

def write_to_excel(df):
    writer = pd.ExcelWriter('example.xlsx', engine='xlsxwriter')
    df.to_excel('class_info.xlsx', 'Sheet1')
    writer.save()

#Helper Functions

def convert_to_weekday(string):
    loc = 0
    day = ""
    if string.find("M") != -1:
        day += "M "
    if string.find("Tu") != -1:
        day += "Tu "
    if string.find("W") != -1:
        day += "W "
    if string.find("Th") != -1:
        day += "Th "
    if string.find("F") != -1:
        day += "F "
    if string.find("Sat") != -1:
        day += "Sat "
    if string.find("Sun") != -1:
        day += "Sun "
    return day

def get_class_level(string):
    if string[0] == "U":
        return "Upper"
    elif string[0] == "L":
        return "Lower"
    elif string[0] == "G":
        return "Graduate"
    else:
        return string

def isNone(string):
    if (string == "N/A" != -1):
        return None
    elif (string == "No" != -1):
        return None
    elif (string.find("None") != -1):
        return None
    elif string.find("does not") != -1:
        return None
    else:
        return string
    

mail_host="smtp.mailgun.org"
mail_user="postmaster@sandbox771d908665d24655b9cd402f4ece3dc8.mailgun.org"   
mail_pass="bfce1771c370570883fd229be0f3638a"

TERM = '18W'
#CLASS_ID = ["262447200", "262576200"]
#RECEIVER="Kaiyuan Chen"
#RECEIVER_ADDR='chenkaiyuan@ucla.edu'


import smtplib
from email.mime.text import MIMEText
from email.header import Header
from email.MIMEMultipart import MIMEMultipart
from email.MIMEBase import MIMEBase
from email import Encoders

def sendEmail(content, address):
    print(content)
    message = MIMEMultipart()
    text = MIMEText(content, 'plain', 'utf-8')
    message['From'] = Header("UCLA Class Assistant", 'utf-8')
    message['To'] =  Header("Luli", 'utf-8')
    message['Subject'] = Header("Class Daily Report", 'utf-8')
    message.attach(text)
    exc = open("class_info.xlsx", "rb")
    file1=MIMEBase('application','vnd.ms-excel')
    file1.set_payload(exc.read())
    exc.close()
    Encoders.encode_base64(file1)
    file1.add_header('Content-Disposition','attachment;filename=class_information.xlsx')
    message.attach(file1)
    
    receivers = ["chenkaiyuan@ucla.edu"]
    sender = "chenkaiyuan@ucla.edu"
    receivers.append(address)
    smtpObj = smtplib.SMTP('smtp.mailgun.org', 587)
    smtpObj.login(mail_user,mail_pass)
    print receivers
    print address
    smtpObj.sendmail(sender, receivers, message.as_string())
    smtpObj.quit()
    print "success"

import time 
def send_email_to(data):
    should_send = False
    l = list()
    ostream="Hi, "
    ostream+=data["name"]
    ostream+='\n\nYour restriction is gone!\n\n'
    for ID in data["list"]:
        info, seats= getOpenSeats(ID)
        ostream+= seats
        l.append(info)
        if(info["restriction"] == None):
            should_send = True
        else:
            print info["restriction"]
        ostream+='\n'
    ostream+='''
Kepler:)'''
    df = create_data_frame(l)
    write_to_excel(df)
    if(should_send == True):
        sendEmail(ostream, data["email"])
        print ostream
    else:
        print("Restriction is there")
        print(time.asctime(time.localtime(time.time())))
        log_file = open("/home/ubuntu/ClassUCLA/app/log.txt", 'a')
        log_file.write(time.asctime(time.localtime(time.time())))
        log_file.write("  Restricted\n")
        log_file.close()
        
import json
if __name__ == '__main__':
    with open('/home/ubuntu/data/luli_stat.json') as data_file:
        data = json.load(data_file)
        send_email_to(data)
